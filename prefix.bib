

@book{Reinders2007,
	Abstract = {Multithreading is a requirement for good performance of systems with multi-core chips. This book explains how to maximize the benefits of these processors through a portable C++ library that works on Windows, Linux, Macintosh, and Unix systems. It explains the key tasks in multithreading and how to accomplish them with TBB in a useful manner.
},
	Address = {Sebastopol, CA},
	Author = {James Reinders},
	Date-Added = {2014-10-14 18:16:01 +0000},
	Date-Modified = {2014-10-14 18:16:53 +0000},
	Publisher = {O'Reilly},
	Title = {Intel threading building blocks: outfitting {C}++ for multi-core processor parallelism},
	Volume = {2007},
	Year = {2007}}

@incollection{Tait1965,
	Abstract = {This chapter describes infinitely long terms of transfinite type. Functionals of higher type have been introduced into proof theory, which gives an interpretation of first order number theory in terms of the impredicative primitive recursive (p.r.) functionals of finite type. The chapter shows that for the consistency of number theory, Gentzen's use of induction up to ɛ0 (with respect to p.r. properties) can be replaced by a quite different constructive.--- but like Gentzen's non-finitist - principle---namely, the assumption of constructive functionals of finite type and of their closure under p.r. operations. The chapter discusses only p.r. functionals or rather a certain generalization of them. The p.r. functionals of finite type can be generated from such φ by means of λ-abstraction and explicit definition.},
	Address = {Amsterdam},
	Author = {W W Tait},
	Booktitle = {Formal Systems and Recursive Functions},
	Chapter = {10},
	Date-Modified = {2014-10-14 18:15:58 +0000},
	Editor = {J N Crossley and M A E Dummett},
	Pages = {176-185},
	Publisher = {North-Holland Publishing},
	Series = {Studies in Logic and the Foundations of Mathematics},
	Title = {Infinitely long terms of transfinite type},
	Volume = {40},
	Year = {1965},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/S0049-237X(08)71689-6}}

@book{Curry1958,
	Address = {Amsterdam},
	Author = {Haskell B Curry},
	Date-Added = {2014-10-11 00:46:14 +0000},
	Date-Modified = {2014-10-11 00:57:53 +0000},
	Edition = {2},
	Editor = {Haskell B Curry and Robert Feys},
	Publisher = {North-Holland Publishing},
	Series = {Studies in logic and the foundations of mathematics},
	Title = {Combinatory Logic, Volume I},
	Volume = {22},
	Year = {1958}}

@incollection{Howard1980,
	Address = {New York, New York, USA},
	Author = {Howard, William A},
	Booktitle = {To {H}. {B}. {C}urry: Essays on Combinatory Logic, Lambda Calculus, and Formalism},
	Editor = {J P Seldin and J R Hindley},
	Pages = {479--490},
	Publisher = {Academic Press},
	Title = {The formulas-as-types notion of construction},
	Year = {1980}}

@book{Abelson1996,
	Address = {Cambridge, Massachusetts},
	Author = {Abelson, Harold and Sussman, Gerald Jay and Julie Sussman},
	Edition = {2},
	Publisher = {MIT Press/McGraw-Hill},
	Title = {Structure and Interpretation of Computer Programs},
	Year = 1996}

@incollection{Horn2005,
	Author = {Daniel Horn},
	Booktitle = {GPU Gems 2},
	Chapter = {36},
	Editor = {M Pharr},
	Pages = {573-589},
	Publisher = {Addison-Wesley},
	Title = {Stream Reduction Operations for GPGPU Applications},
	Year = {2005},
	Bdsk-Url-1 = {http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter36.html}}

@book{Abadi1996,
	Address = {New York, New York, USA},
	Author = {Mart{\'\i}n Abadi and Luca Cardelli},
	Date-Added = {2014-10-09 22:27:22 +0000},
	Date-Modified = {2014-10-09 22:29:00 +0000},
	Number = {1},
	Publisher = {Springer-Verlag},
	Series = {Monographs in Computer Science},
	Title = {A theory of objects},
	Year = {1996}}

@article{Ofman1962,
	Author = {Yuri Ofman},
	Journal = {Dokl. Akad. Nauk SSSR},
	Number = {1},
	Pages = {48-51},
	Title = {Об алгоритмической сложности дискретных функций},
	Volume = {145},
	Year = {1962}}

@url{Gadfly.jl,
	Author = {Daniel C Jones and David Chudzicki and Avik Sengupta and others},
	Title = {Gadfly.jl v0.3.9 (gadflyjl.org) - Native plotting and visualization for {J}ulia},
	Urldate = {2014-09-26},
	Bdsk-Url-1 = {http://gadflyjl.org},
	Bdsk-Url-2 = {http://dx.doi.org/10.5281/zenodo.11876}}

@inproceedings{Shah2013,
	Address = {Waltham, MA},
	Author = {Viral B. Shah and Alan Edelman and Stefan Karpinski and Jeff Bezanson},
	Booktitle = {2013 IEEE High Performance Extreme Computing Conference (HPEC)},
	Pages = {1-4},
	Publisher = {IEEE},
	Title = {Novel algebras for advanced analytics in Julia},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/HPEC.2013.6670347}}

@article{McCarthy1960,
	Author = {McCarthy, John},
	Doi = {10.1145/367177.367199},
	Journal = {Commun. ACM},
	Month = apr,
	Number = {4},
	Pages = {184--195},
	Title = {Recursive Functions of Symbolic Expressions and Their Computation by Machine, {P}art {I}},
	Volume = {3},
	Year = {1960},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/367177.367199},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/367177.367199}}

@book{MPI,
	Address = {Cambridge, Massachusetts},
	Author = {William Gropp and Ewing Lusk and Anthony Skjellum},
	Edition = {2},
	Publisher = {MIT Press},
	Title = {Using {MPI}: Portable Parallel Programming with the Message-Passing Interface},
	Year = {1999}}

@book{MPI2,
	Address = {Cambridge, Massachusetts},
	Author = {William Gropp and Ewing Lusk and Rajeev Thakur},
	Publisher = {MIT Press},
	Title = {Using {MPI}-2: Advanced Features of the Message-Passing Interface},
	Year = {1999}}

@book{Iverson1962,
	Address = {New York, NY, USA},
	Author = {Kenneth E Iverson},
	Publisher = {John Wiley \& Sons},
	Title = {A programming language},
	Year = {1962}}

@article{Ladner1980,
	Author = {Ladner, Richard E and Fischer, Michael J},
	Journal = {J. ACM},
	Number = {4},
	Pages = {831--838},
	Title = {Parallel Prefix Computation},
	Volume = {27},
	Year = {1980},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/322217.322232}}

@article{Bezanson2012,
	Archiveprefix = {arXiv},
	Author = {Jeff Bezanson and Stefan Karpinski and Viral B. Shah and Alan Edelman},
	Eprint = {1209.5145},
	Journal = {arXiv:1209.5145 [cs.PL]},
	Primaryclass = {cs.PL},
	Title = {{J}ulia: A Fast Dynamic Language for Technical Computing},
	Bdsk-Url-1 = {http://arxiv.org/abs/1209.5145}}

@inproceedings{Bezanson2014,
	Acmid = {2627383},
	Address = {New York, NY, USA},
	Articleno = {56},
	Author = {Bezanson, Jeff and Chen, Jiahao and Karpinski, Stefan and Shah, Viral and Edelman, Alan},
	Booktitle = {Proceedings of ACM SIGPLAN International Workshop on Libraries, Languages, and Compilers for Array Programming},
	Date-Added = {2014-10-02 20:59:56 +0000},
	Date-Modified = {2014-10-02 21:09:24 +0000},
	Doi = {10.1145/2627373.2627383},
	Isbn = {978-1-4503-2937-8},
	Keywords = {Julia, array indexing, dynamic dispatch, multiple dispatch, static analysis, type inference},
	Location = {Edinburgh, United Kingdom},
	Numpages = {6},
	Pages = {56--61},
	Publisher = {ACM},
	Series = {ARRAY'14},
	Title = {Array Operators Using Multiple Dispatch: A Design Methodology for Array Implementations in Dynamic Languages},
	Year = {2014},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2627373.2627383},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2627373.2627383}}

@url{Compose.jl,
	Author = {Daniel C Jones and Darwin Darakananda and Keno Fischer and others},
	Date-Added = {2014-10-02 20:56:32 +0000},
	Date-Modified = {2014-10-03 16:56:42 +0000},
	Title = {Compose.jl v0.3.9 (composejl.org) - Declarative vector graphics for {J}ulia},
	Url = {http://composejl.org},
	Urldate = {2014-09-26},
	Bdsk-Url-1 = {composejl.org}}

@incollection{Blelloch1993,
	Address = {San Mateo, California},
	Author = {Blelloch, Guy E},
	Booktitle = {Synthesis of Parallel Algorithms},
	Chapter = {1},
	Editor = {Reif, John H},
	Pages = {35--60},
	Publisher = {Morgan Kaufmann},
	Title = {Prefix sums and their applications},
	Year = {1993}}

@article{Brent1982,
	Author = {Brent, Richard P},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TC.1982.1675982},
	Issn = {0018-9340},
	Journal = {IEEE Trans. Comput.},
	Month = mar,
	Number = {3},
	Pages = {260--264},
	Title = {A Regular Layout for Parallel Adders},
	Volume = {C-31},
	Year = {1982}}

@incollection{Bell2012,
	Address = {Waltham, MA},
	Author = {Bell, Nathan and Hoberock, Jared},
	Booktitle = {GPU Computing Gems Jade Edition},
	Chapter = {26},
	Date-Modified = {2014-10-03 02:04:37 +0000},
	Editor = {Hwu, Wen-Mei W. and Schuh, Andrew and Mohammad, Nadeem and Bradley, Thomas and Jargstorff, Frank and Micikevicius, Paulius and Tonge, Richard and Wang, Peng and Wooley, Cliff},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Bell, Hoberock/GPU Computing Gems Jade Edition/Bell, Hoberock - 2012 - Thrust A Productivity-Oriented Library for CUDA.pdf:pdf},
	Isbn = {9780123859631},
	Pages = {359--371},
	Publisher = {Morgan-Kaufmann},
	Series = {Applications of GPU Computing},
	Title = {{T}hrust: A Productivity-Oriented Library for {CUDA}},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/B978-0-12-385963-1.00026-5}}

@incollection{Harris2007,
	Abstract = {Parallel prefix sum, also known as parallel Scan, is a useful building block for many parallel algorithms including sorting and building data structures. In this document we introduce Scan and describe step-by-step how it can be implemented efficiently in NVIDIA CUDA. We start with a basic na\"{\i}ve algorithm and proceed through more advanced techniques to obtain best performance. We then explain how to scan arrays of arbitrary size that cannot be processed with a single block of threads. Month},
	Address = {Upper Saddle River, NJ},
	Author = {Harris, Mark and Sengupta, S and Owens, JD},
	Booktitle = {GPU Gems 3},
	Chapter = {39},
	Date-Modified = {2014-10-03 02:06:25 +0000},
	Editor = {Nguyen, Hubert},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Harris, Sengupta, Owens/GPU Gems 3/Harris, Sengupta, Owens - 2007 - Parallel prefix sum (scan) with CUDA.pdf:pdf},
	Keywords = {parallel prefix sum},
	Number = {April 2007},
	Pages = {851--876},
	Publisher = {Addison-Wesley},
	Title = {Parallel prefix sum (scan) with {CUDA}},
	Year = {2007}}

@book{Blelloch1990,
	Address = {Cambridge, Massachusetts},
	Author = {Blelloch, Guy E},
	Publisher = {MIT Press},
	Series = {Artificial Intelligence},
	Title = {Vector models for data-parallel computing},
	Year = {1990},
	Bdsk-Url-1 = {https://www.cs.cmu.edu/afs/cs.cmu.edu/Web/People/blelloch/papers/Ble90.pdf}}

@inproceedings{Chakravarty2011,
	Address = {New York, New York, USA},
	Author = {Chakravarty, Manuel M T and Keller, Gabriele and Lee, Sean and McDonell, Trevor L and Grover, Vinod},
	Booktitle = {Proceedings of the Sixth Workshop on Declarative Aspects of Multicore Programming - DAMP '11},
	Date-Modified = {2014-10-10 23:23:23 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Chakravarty et al/Proceedings of the sixth workshop on Declarative aspects of multicore programming - DAMP '11/Chakravarty et al. - 2011 - Accelerating Haskell array codes with multicore GPUs.pdf:pdf},
	Isbn = {9781450304863},
	Keywords = {chakravarty,elerating haskell array codes,manuel m,t,with multicore gpus},
	Pages = {3--14},
	Publisher = {ACM Press},
	Title = {Accelerating {H}askell array codes with multicore {GPU}s},
	Year = {2011},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1926354.1926358},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1926354.1926358}}

@article{Chamberlain2000,
	Author = {Chamberlain, Bradford L and Choi, Sung-Eun and Lewis, E Christopher and Lin, Calvin and Snyder, Lawrence and Weathersby, W Derrick},
	Date-Modified = {2014-10-03 02:04:28 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Chamberlain et al/IEEE Trans. Software Engineering/Chamberlain et al. - 2000 - ZPL a machine independent programming language for parallel computers.pdf:pdf},
	Issn = {00985589},
	Journal = {IEEE Trans. Software Eng.},
	Month = mar,
	Number = {3},
	Pages = {197--211},
	Title = {{ZPL}: a machine independent programming language for parallel computers},
	Volume = {26},
	Year = {2000},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=842947},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/32.842947}}

@article{Blelloch1989,
	Author = {Blelloch, Guy E},
	Date-Modified = {2014-10-03 01:28:28 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Blelloch/IEEE Trans. Computers/Blelloch - 1989 - Scans as primitive parallel operations.pdf:pdf},
	Issn = {00189340},
	Journal = {IEEE Trans. Comput.},
	Number = {11},
	Pages = {1526--1538},
	Title = {Scans as primitive parallel operations},
	Volume = {38},
	Year = {1989},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=42122},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/12.42122}}

@inproceedings{Chong2014,
	Address = {New York, New York, USA},
	Author = {Chong, Nathan and Donaldson, Alastair F. and Ketema, Jeroen},
	Booktitle = {Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages - POPL '14},
	Isbn = {9781450325448},
	Pages = {397--409},
	Publisher = {ACM Press},
	Title = {A sound and complete abstraction for reasoning about parallel prefix sums},
	Year = {2014},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2535838.2535882},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2535838.2535882}}

@article{Wang1996,
	Author = {Wang, Haigeng and Nicolau, Alexandru and Siu, Kai-Yeng S},
	Journal = {IEEE Trans. Comput.},
	Number = {11},
	Pages = {1257--1271},
	Title = {The strict time lower bound and optimal schedules for parallel prefix with resource constraints},
	Volume = {45},
	Year = {1996},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%5C_all.jsp?arnumber=544482%20http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=544482},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/12.544482}}

@article{Gorlatch1999,
	Abstract = {Homomorphisms are functions that match the divide-and-conquer pattern and are widely used in parallel programming. Two problems are studied for homomorphisms on lists: 1. (1) parallelism extraction: finding a homomorphic representation of a given function; 2. (2) parallelism implementation: deriving an efficient parallel program that computes the function. The proposed approach to parallelism extraction starts by writing two sequential programs for the function, on traditional cons lists and on dual snoc lists; the parallel program is obtained by generalizing sequential programs as terms. For almost-homomorphic functions, e.g., the maximum segment sum problem, our method provides a systematic embedding into a homomorphism. The implementation problem is addressed by introducing the class of distributable homomorphisms and deriving for them a common parallel program schema. The derivation is based on equational reasoning in the Bird-Meertens formalism, which guarantees the correctness of the parallel target program. The approach is illustrated with the function scan (parallel prefix), for which the combination of our two systematic methods yields the optimal hypercube algorithm, usually presented ad hoc in the literature.},
	Author = {Gorlatch, Sergei},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/S0167-6423(97)00014-2},
	Journal = {Sci. Comput. Program.},
	Keywords = {ence of},
	Month = jan,
	Number = {1},
	Pages = {1--27},
	Title = {Extracting and implementing list homomorphisms in parallel program development},
	Volume = {33},
	Year = {1999}}

@incollection{Hinze2004,
	Address = {Berlin, Heidelberg},
	Author = {Hinze, Ralf},
	Booktitle = {Mathematics of Program Construction},
	Chapter = {11},
	Editor = {Kozen, Dexter},
	Isbn = {978-3-540-22380-1},
	Pages = {186--210},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Title = {An Algebra of Scans},
	Year = {2004},
	Bdsk-Url-1 = {http://link.springer.com/chapter/10.1007/978-3-540-27764-4%5C_11},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/978-3-540-27764-4%5C_11}}

@incollection{Sanders2006,
	Address = {Berlin, Heidelberg},
	Author = {Sanders, Peter and Tr\"{a}ff, Jesper Larsson},
	Booktitle = {Recent Advances in Parallel Virtual Machine and Message Passing Interface},
	Chapter = {15},
	Editor = {Mohr, Bernd and Tr\"{a}ff, Jesper Larsson and Worringen, Joachim and Dongarra, Jack},
	Pages = {49--57},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Title = {Parallel Prefix (Scan) Algorithms for {MPI}},
	Year = {2006},
	Bdsk-Url-1 = {http://link.springer.com/chapter/10.1007/11846802%5C_15%20http://www.springerlink.com/index/10.1007/11846802},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/11846802}}

@article{Mathias1995,
	Author = {Mathias, Roy},
	Journal = {SIAM J. Sci. Comput.},
	Month = jul,
	Number = {4},
	Pages = {956--973},
	Title = {The Instability of Parallel Prefix Matrix Multiplication},
	Volume = {16},
	Year = {1995},
	Bdsk-Url-1 = {http://dx.doi.org/10.1137/0916056}}

@article{Seal2013,
	Author = {Seal, Sudip K. and Perumalla, Kalyan S. and Hirshman, Steven P.},
	Journal = {J. Parallel Distributed Comput.},
	Keywords = {2013,273,280,73,com,comput,contents lists available at,elsevier,j,journal homepage,jpdc,locate,parallel distrib,sciverse sciencedirect,www},
	Month = feb,
	Number = {2},
	Pages = {273--280},
	Title = {Revisiting parallel cyclic reduction and parallel prefix-based algorithms for block tridiagonal systems of equations},
	Volume = {73},
	Year = {2013},
	Bdsk-Url-1 = {http://linkinghub.elsevier.com/retrieve/pii/S0743731512002535},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/j.jpdc.2012.10.003}}

@article{Lu1996,
	Author = {Lu, Tan-Chun and Hou, Yu-Song and Chen, Rong-Jaye},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/0898-1221(95)00204-9},
	Journal = {Comput. Math. App.},
	Month = feb,
	Number = {3},
	Pages = {33--42},
	Title = {A parallel {P}oisson generator using parallel prefix},
	Volume = {31},
	Year = {1996}}

@article{Chen1992,
	Abstract = {Associativity of a binary operation allows many applications that are not possible with a non-associative binary operation. We propose a method to transform a binary expression into an associative one and present two related applications.},
	Author = {Chen, Rong-Jaye and Hou, Yu-Song},
	Journal = {Information Processing Lett.},
	Month = nov,
	Number = {2},
	Pages = {91--94},
	Title = {Non-associative parallel prefix computation},
	Volume = {44},
	Year = {1992},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/002001909290191W%20http://linkinghub.elsevier.com/retrieve/pii/002001909290191W},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/0020-0190(92)90191-W}}

@article{Egecioglu1992,
	Author = {E{\u g}ecio{\u g}lu, {\"O}mer and Ko{\c c}, {\c C}etin Kaya},
	Date-Modified = {2014-10-03 02:06:05 +0000},
	Journal = {Comput. Math. App.},
	Number = {4},
	Pages = {77--84},
	Title = {Parallel Prefix Computation with Few Processors},
	Volume = {24},
	Year = {1992},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/0898-1221(92)90009-7}}

@incollection{Chi1992,
	Address = {Berlin, Heidelberg},
	Author = {Chi, Lucas and Hui, Kwong},
	Booktitle = {Combinatorial Pattern Matching},
	Chapter = {19},
	Editor = {Apostolico, Alberto and Crochemore, Maxime and Galil, Zvi and Manber, Udi},
	Pages = {230--243},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Title = {Color Set Size problem with applications to string matching},
	Year = {1992},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-56024-6%5C_19}}

@article{Kruskal1985,
	Author = {Kruskal, Clyde P. and Rudolph, Larry and Snir, Marc},
	Journal = {IEEE Trans. Comput.},
	Number = {10},
	Pages = {965--968},
	Title = {The power of parallel prefix},
	Volume = {C-34},
	Year = {1985},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%5C_all.jsp?arnumber=6312202%20http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6312202},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TC.1985.6312202}}

@article{Moitra1991,
	Author = {Moitra, Dipen},
	Journal = {Algorithmica},
	Month = jun,
	Number = {1-6},
	Pages = {624--657},
	Title = {Finding a minimal cover for binary images: An optimal parallel algorithm},
	Volume = {6},
	Year = {1991},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/BF01759065},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/BF01759065}}

@book{Snir1995,
	Address = {Cambridge, MA},
	Author = {Snir, Marc and Otto, Steve and Huss-Lederman, Steven and Walker, David and Dongarra, Jack},
	Publisher = {MIT Press},
	Title = {{MPI}: The Complete Reference},
	Year = {1995}}

@article{Hillis1986,
	Abstract = {Parallel computers with tens of thousands of processors are typically programmed in a data parallel style, as opposed to the control parallel style used in multiprocessing. The success of data parallel algorithms---even on problems that at first glance seem inherently serial---suggests that this style of programming has much wider applicability than was previously thought.},
	Address = {New York, NY, USA},
	Author = {Hillis, W Daniel and {Steele, Jr.}, Guy L},
	Journal = {Commun. ACM},
	Month = dec,
	Number = {12},
	Pages = {1170--1183},
	Publisher = {ACM},
	Title = {Data Parallel Algorithms},
	Volume = {29},
	Year = {1986},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/7902.7903},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/7902.7903}}

@inproceedings{Sengupta2007,
	Abstract = {The scan primitives are powerful, general-purpose data-parallel primitives that are building blocks for a broad range of applications. We describe GPU implementations of these primitives, specifically an efficient formulation and implementation of segmented scan, on NVIDIA GPUs using the CUDA API. Using the scan primitives, we show novel GPU implementations of quicksort and sparse matrix-vector multiply, and analyze the performance of the scan primitives, several sort algorithms that use the scan primitives, and a graphical shallow-water fluid simulation using the scan framework for a tridiagonal matrix solver.},
	Address = {Aire-la-Ville, Switzerland},
	Author = {Sengupta, Shubhabrata and Harris, Mark and Zhang, Yao and Owens, John D},
	Booktitle = {GH '07 Proceedings of the 22nd ACM SIGGRAPH / EUROGRAPHICS symposium on Graphics hardware},
	Pages = {97--106},
	Publisher = {Eurographics Association},
	Title = {Scan primitives for {GPU} computing},
	Year = {2007}}

@article{Egecioglu1990,
	Author = {E{\u g}ecio{\u g}lu, {\"O}. and Gallopoulos, E. and Ko{\c c}, {\c C}. K.},
	Journal = {BIT Numer. Math.},
	Keywords = {1990,268 288,30},
	Month = jun,
	Number = {2},
	Pages = {268--288},
	Title = {A parallel method for fast and practical high-order {N}ewton interpolation},
	Volume = {30},
	Year = {1990},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/BF02017348},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/BF02017348}}

@article{Ofman1963,
	Author = {Ofman, Yu},
	Date-Modified = {2014-10-07 23:59:20 +0000},
	Journal = {Sov. Phys. Dokl.},
	Number = {7},
	Pages = {589--591},
	Title = {On the algorithmic complexity of discrete functions},
	Volume = {7},
	Year = {1963}}

@article{Iverson1979,
	Author = {Iverson, Kenneth E},
	Date-Modified = {2014-10-08 00:31:01 +0000},
	Issn = {01640925},
	Journal = {ACM Trans. Program. Lang. Sys.},
	Month = oct,
	Number = {2},
	Pages = {161--176},
	Title = {Operators},
	Volume = {1},
	Year = {1979},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=357073.357074},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/357073.357074}}

@article{Mitchell1988,
	Abstract = {Abstract data type declarations appear in typed programming languages like Ada, Alphard, CLU and ML. This form of declaration binds a list of identifiers to a type with associated operations, a composite ``value'' we call a data algebra. We use a second-order typed lambda calculus SOL to show how data algebras may be given types, passed as parameters, and returned as results of function calls. In the process, we discuss the semantics of abstract data type declarations and review a connection between typed programming languages and constructive logic.},
	Author = {Mitchell, John C and Plotkin, Gordon D},
	Journal = {ACM Trans. Program. Lang. Sys.},
	Number = {3},
	Pages = {470--502},
	Title = {Abstract types have existential type},
	Volume = {10},
	Year = {1988},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=45065%20http://portal.acm.org/citation.cfm?doid=44501.45065},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/44501.45065}}

@article{Cardelli1985,
	Abstract = {Our objective is to understand the notion of type in programming languages, present a model of typed, polymorphic programming languages that reflects recent research in type theory, and examine the relevance of recent research to the design of practical programming languages. Object-oriented languages provide both a framework and a motivation for exploring the interaction among the concepts of type, data abstraction, and polymorphism, since they extend the notion of type to data abstraction and since type inheritance is an important form of polymorphism. We develop a \&lgr;-calculus-based model for type systems that allows us to explore these interactions in a simple setting, unencumbered by complexities of production programming languages. The evolution of languages from untyped universes to monomorphic and then polymorphic type systems is reviewed. Mechanisms for polymorphism such as overloading, coercion, subtyping, and parameterization are examined. A unifying framework for polymorphic type systems is developed in terms of the typed \&lgr;-calculus augmented to include binding of types by quantification as well as binding of values by abstraction. The typed \&lgr;-calculus is augmented by universal quantification to model generic functions with type parameters, existential quantification and packaging (information hiding) to model abstract data types, and bounded quantification to model subtypes and type inheritance. In this way we obtain a simple and precise characterization of a powerful type system that includes abstract data types, parametric polymorphism, and multiple inheritance in a single consistent framework. The mechanisms for type checking for the augmented \&lgr;-calculus are discussed. The augmented typed \&lgr;-calculus is used as a programming language for a variety of illustrative examples. We christen this language Fun because fun instead of \&lgr; is the functional abstraction keyword and because it is pleasant to deal with. Fun is mathematically simple and can serve as a basis for the design and implementation of real programming languages with type facilities that are more powerful and expressive than those of existing programming languages. In particular, it provides a basis for the design of strongly typed object-oriented languages.},
	Author = {Cardelli, Luca and Wegner, Peter},
	Date-Modified = {2014-10-09 22:27:18 +0000},
	Journal = {ACM Comput. Surveys},
	Number = {4},
	Pages = {471--523},
	Title = {On understanding types, data abstraction, and polymorphism},
	Volume = {17},
	Year = {1985},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/6041.6042}}

@book{Castagna1997,
	Address = {Boston},
	Author = {Castagna, Giuseppe},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Castagna/Unknown/Castagna - 1997 - Object-oriented programming a unified foundation.pdf:pdf},
	Isbn = {9781461286707},
	Publisher = {Birkh{\"a}user},
	Series = {Progress in Theoretical Computer Science},
	Title = {Object-oriented programming: a unified foundation},
	Year = {1997},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=249197}}

@article{Scott1976,
	Author = {Scott, Dana},
	Journal = {SIAM J. Comput},
	Keywords = {a types},
	Number = {3},
	Pages = {522--87},
	Title = {Data types as lattices},
	Volume = {5},
	Year = {1976}}

@article{Strachey2000,
	Abstract = {This paper forms the substance of a course of lectures given at the International Summer School in Computer Programming at Copenhagen in August, 1967. The lectures were originally given from notes and the paper was written after the course was finished. In spite of this, and only partly because of the shortage of time, the paper still retains many of the shortcomings of a lecture course. The chief of these are an uncertainty of aim---it is never quite clear what sort of audience there will be for such lectures---and an associated switching from formal to informal modes of presentation which may well be less acceptable in print than it is natural in the lecture room. For these (and other) faults, I apologise to the reader. There are numerous references throughout the course to CPL [1--3]. This is a programming language which has been under development since 1962 at Cambridge and London and Oxford. It has served as a vehicle for research into both programming languages and the design of compilers. Partial implementations exist at Cambridge and London. The language is still evolving so that there is no definitive manual available yet. We hope to reach another resting point in its evolution quite soon and to produce a compiler and reference manuals for this version. The compiler will probably be written in such a way that it is relatively easyto transfer it to another machine, and in the first instance we hope to establish it on three or four machines more or less at the same time. The lack of a precise formulation for CPL should not cause much difficulty in this course, as we are primarily concerned with the ideas and concepts involved rather than with their precise representation in a programming language.},
	Author = {Strachey, Christopher},
	Journal = {Higher-Order Symbol. Comput.},
	Number = {1-2},
	Pages = {11--49},
	Title = {Fundamental Concepts in Programming Languages},
	Volume = {13},
	Year = {2000},
	Bdsk-Url-1 = {http://dx.doi.org/10.1023/A:1010000313106}}

@article{Kogge1973,
	Author = {Kogge, Peter M. and Stone, Harold S.},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TC.1973.5009159},
	Journal = {IEEE Trans. Comput.},
	Keywords = {1969 by eta kappa,8,august 1973,c-22,can automatic control council,he has served,he was also named,ieee transactions on computers,no,nu,the outstanding,vol,young electrical engineer for},
	Month = aug,
	Number = {8},
	Pages = {786--793},
	Title = {A Parallel Algorithm for the Efficient Solution of a General Class of Recurrence Equations},
	Volume = {C-22},
	Year = {1973}}

@article{Sklansky1960,
	Author = {Sklansky, J},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TEC.1960.5219822},
	Journal = {IEEE Trans. Electronic Comput.},
	Number = {2},
	Pages = {226--231},
	Title = {Conditional-Sum Addition Logic},
	Volume = {EC-9},
	Year = {1960}}

@article{Smith1987,
	Author = {Smith, Douglas R},
	Journal = {Sci. Comput. Program.},
	Number = {3},
	Pages = {213--229},
	Title = {Applications of a strategy for designing divide-and-conquer algorithms},
	Volume = {8},
	Year = {1987},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/0167642387900347},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/0167-6423(87)90034-7}}

@techreport{Merrill2009,
	Address = {Charlottesville, Virginia},
	Author = {Merrill, Duane and Grimshaw, A},
	Booktitle = {University of \ldots},
	Date-Modified = {2014-10-14 18:15:58 +0000},
	Institution = {Department of Computer Science, University of Virginia},
	Number = {December 2009},
	Title = {Parallel Scan for Stream Architectures},
	Year = {2009},
	Bdsk-Url-1 = {http://back40computing.googlecode.com/svn-history/r638/wiki/documents/ParallelScanForStreamArchitecturesTR.pdf}}

@incollection{Wilt2013,
	Author = {Wilt, Nicholas},
	Booktitle = {The CUDA Handbook: A Comprehensive Guide to GPU Programming},
	Chapter = {13},
	Date-Modified = {2014-10-14 18:15:58 +0000},
	Publisher = {Pearson Education},
	Title = {Scan},
	Year = {2013},
	Bdsk-Url-1 = {http://www.cudahandbook.com/}}

@inproceedings{Friedman1976,
	Abstract = {Early results fo a project on compiling stylized recursion into stackless iterative code are reviewed as they apply to a target environment with multiprocessing. Parallelism is possible in executing the compiled image of arfument evaluation (collateral argument evaluation of ALgol 68), of data structure construcrtion whernsuspensions are use,d and of functional combination. The last facility provides general, consie expression for all operations performed in LISP by mapping functions and in APL by typed operators; there are other uses as well.},
	Address = {Long Beach, CA},
	Author = {Friedman, DP and Wise, DS},
	Booktitle = {Proceedings of the 1976 International Conference on Parallel Processing},
	Keywords = {Functional combination,LISP,explicit futures,parallelism,recursion,suspensions},
	Pages = {263--272},
	Publisher = {IEEE},
	Title = {The impact of applicative programming on multiprocessing},
	Year = {1976}}

@techreport{Viswanathan1996,
	Abstract = {Data-parallel languages typically include reduction operations for specifying combining and communication. However, most languages limit reductions to predefined arithmetic and logical operators. User-defined reductions generalize reductions in two dimensions: they allow the programmer to specify complex combining operations (such as building a list of multiple values), and they extend naturally to user-defined data types. This paper demonstrates that user-defined reductions in a data-parallel language offer an efficient, high-level interface to commonly occurring communication patterns in scientific applications. It describes the design and implementation of user-defined reductions in the data-parallel language C** with simple message passing support. It also shows how reductions capture important communication patterns in a variety of applications efficiently.},
	Address = {Madison},
	Author = {Viswanathan, Guhan and Larus, James R},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Viswanathan, Larus/Unknown/Viswanathan, Larus - 1996 - User-defined Reductions for Efficient Communication in Data-Parallel Languages.pdf:pdf},
	Institution = {University of Wisconsin},
	Title = {{User-defined Reductions for Efficient Communication in Data-Parallel Languages}},
	Year = {1996}}

@inproceedings{Deitz2006,
	Address = {New York, New York, USA},
	Author = {Deitz, Steven J. and Callahan, David and Chamberlain, Bradford L. and Snyder, Lawrence},
	Booktitle = {Proceedings of the eleventh ACM SIGPLAN symposium on Principles and practice of parallel programming - PPoPP '06},
	Date-Modified = {2014-10-14 18:15:58 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Deitz et al/Proceedings of the eleventh ACM SIGPLAN symposium on Principles and practice of parallel programming - PPoPP '06/Deitz et al. - 2006 - Global-view abstractions for user-defined reductions and scans.pdf:pdf},
	Isbn = {1595931899},
	Pages = {40--47},
	Publisher = {ACM Press},
	Title = {{Global-view abstractions for user-defined reductions and scans}},
	Year = {2006},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1122971.1122980},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1122971.1122980}}

@article{Deitz2002,
	Abstract = {The optimized handling of reductions on parallel supercomputers or clusters of workstations is critical to high performance because reductions are common in scientific codes and a potential source of bottlenecks. Yet in many high-level languages, a mechanism for writing efficient reductions remains surprisingly absent. Further, when such mechanisms do exist, they often do not provide the flexibility a programmer needs to achieve a desirable level of performance. In this paper, we present a new language construct for arbitrary reductions that lets a programmer achieve a level of performance equal to that achievable with the highly flexible, but low-level combination of Fortran and MPI. We have implemented this construct in the ZPL language and evaluate it in the context of the initialization of the NAS MG benchmark. We show a 45 times speedup over the same code written in ZPL without this construct. In addition, performance on a large number of processors surpasses that achieved in the NAS implementation showing that our mechanism provides programmers with the needed flexibility.},
	Author = {Deitz, Steven J and Chamberlain, Bradford L and Snyder, Lawrence},
	Date-Modified = {2014-10-14 18:15:58 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Deitz, Chamberlain, Snyder/The Journal of Supercomputing/Deitz, Chamberlain, Snyder - 2002 - High-level language support for user-defined reductions.pdf:pdf},
	Journal = {The Journal of Supercomputing},
	Keywords = {2002,2002 kluwer academic publishers,23,37,for user-defined reductions,high-level language support,journal of supercomputing,manufactured in the netherlands},
	Number = {1},
	Pages = {23--37},
	Title = {{High-level language support for user-defined reductions}},
	Volume = {23},
	Year = {2002},
	Bdsk-Url-1 = {http://link.springer.com/article/10.1023/A:1015781018449},
	Bdsk-Url-2 = {http://dx.doi.org/10.1023/A:1015781018449}}
