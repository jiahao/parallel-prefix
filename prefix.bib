

@incollection{Tait1965,
	Abstract = {This chapter describes infinitely long terms of transfinite type. Functionals of higher type have been introduced into proof theory, which gives an interpretation of first order number theory in terms of the impredicative primitive recursive (p.r.) functionals of finite type. The chapter shows that for the consistency of number theory, Gentzen's use of induction up to ɛ0 (with respect to p.r. properties) can be replaced by a quite different constructive.--- but like Gentzen's non-finitist - principle---namely, the assumption of constructive functionals of finite type and of their closure under p.r. operations. The chapter discusses only p.r. functionals or rather a certain generalization of them. The p.r. functionals of finite type can be generated from such φ by means of λ-abstraction and explicit definition.},
	Address = {Amsterdam},
	Author = {W W Tait},
	Booktitle = {Formal Systems and Recursive Functions},
	Chapter = {10},
	Date-Added = {2014-10-11 00:52:32 +0000},
	Date-Modified = {2014-10-11 00:54:34 +0000},
	Doi = {10.1016/S0049-237X(08)71689-6},
	Editor = {J N Crossley and M A E Dummett},
	Pages = {176-185},
	Publisher = {North-Holland Publishing},
	Series = {Studies in Logic and the Foundations of Mathematics},
	Title = {Infinitely long terms of transfinite type},
	Volume = {40},
	Year = {1965}}

@book{Curry1958,
	Address = {Amsterdam},
	Author = {Haskell B Curry},
	Date-Added = {2014-10-11 00:46:14 +0000},
	Date-Modified = {2014-10-11 00:57:53 +0000},
	Edition = {2},
	Editor = {Haskell B Curry and Robert Feys},
	Publisher = {North-Holland Publishing},
	Series = {Studies in logic and the foundations of mathematics},
	Title = {Combinatory Logic, Volume I},
	Volume = {22},
	Year = {1958}}

@incollection{Howard1980,
	Address = {New York, New York, USA},
	Author = {Howard, William A},
	Booktitle = {To {H}. {B}. {C}urry: Essays on Combinatory Logic, Lambda Calculus, and Formalism},
	Date-Added = {2014-10-11 00:42:19 +0000},
	Date-Modified = {2014-10-11 00:43:57 +0000},
	Editor = {J P Seldin and J R Hindley},
	Pages = {479--490},
	Publisher = {Academic Press},
	Title = {The formulas-as-types notion of construction},
	Year = {1980}}

@book{Abelson1996,
	Address = {Cambridge, Massachusetts},
	Author = {Abelson, Harold and Sussman, Gerald Jay and Julie Sussman},
	Date-Added = {2014-10-11 00:06:16 +0000},
	Date-Modified = {2014-10-11 00:06:48 +0000},
	Edition = {2},
	Publisher = {MIT Press/McGraw-Hill},
	Title = {Structure and Interpretation of Computer Programs},
	Year = 1996}

@incollection{Horn2005,
	Author = {Daniel Horn},
	Booktitle = {GPU Gems 2},
	Chapter = {36},
	Date-Added = {2014-10-10 19:46:00 +0000},
	Date-Modified = {2014-10-10 23:23:04 +0000},
	Editor = {M Pharr},
	Pages = {573-589},
	Publisher = {Addison-Wesley},
	Title = {Stream Reduction Operations for GPGPU Applications},
	Year = {2005},
	Bdsk-Url-1 = {http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter36.html}}

@book{Abadi1996,
	Address = {New York, New York, USA},
	Author = {Mart{\'\i}n Abadi and Luca Cardelli},
	Date-Added = {2014-10-09 22:27:22 +0000},
	Date-Modified = {2014-10-09 22:29:00 +0000},
	Number = {1},
	Publisher = {Springer-Verlag},
	Series = {Monographs in Computer Science},
	Title = {A theory of objects},
	Year = {1996}}

@article{Ofman1962,
	Author = {Yuri Ofman},
	Date-Added = {2014-10-07 23:59:22 +0000},
	Date-Modified = {2014-10-07 23:59:54 +0000},
	Journal = {Doklady Akademii Nauk SSSR},
	Number = {1},
	Pages = {48-51},
	Title = {Об алгоритмической сложности дискретных функций},
	Volume = {145},
	Year = {1962}}

@url{Gadfly.jl,
	Author = {Daniel C Jones and David Chudzicki and Avik Sengupta and others},
	Date-Added = {2014-10-03 16:47:06 +0000},
	Date-Modified = {2014-10-06 00:51:39 +0000},
	Title = {Gadfly.jl v0.3.9 (gadflyjl.org) - Native plotting and visualization for {J}ulia},
	Urldate = {2014-09-26},
	Bdsk-Url-1 = {http://gadflyjl.org},
	Bdsk-Url-2 = {http://dx.doi.org/10.5281/zenodo.11876}}

@inproceedings{Shah2013,
	Address = {Waltham, MA},
	Author = {Viral B. Shah and Alan Edelman and Stefan Karpinski and Jeff Bezanson},
	Booktitle = {2013 IEEE High Performance Extreme Computing Conference (HPEC)},
	Date-Added = {2014-10-03 16:40:19 +0000},
	Date-Modified = {2014-10-03 16:47:04 +0000},
	Pages = {1-4},
	Publisher = {IEEE},
	Title = {Novel algebras for advanced analytics in Julia},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/HPEC.2013.6670347}}

@article{McCarthy1960,
	Author = {McCarthy, John},
	Date-Added = {2014-10-03 05:18:09 +0000},
	Date-Modified = {2014-10-06 00:52:06 +0000},
	Doi = {10.1145/367177.367199},
	Journal = {Communications of the ACM},
	Month = apr,
	Number = {4},
	Pages = {184--195},
	Title = {Recursive Functions of Symbolic Expressions and Their Computation by Machine, {P}art {I}},
	Volume = {3},
	Year = {1960},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/367177.367199},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/367177.367199}}

@book{MPI,
	Address = {Cambridge, Massachusetts},
	Author = {William Gropp and Ewing Lusk and Anthony Skjellum},
	Date-Added = {2014-10-03 01:44:23 +0000},
	Date-Modified = {2014-10-03 05:22:46 +0000},
	Edition = {2},
	Publisher = {MIT Press},
	Title = {Using {MPI}: Portable Parallel Programming with the Message-Passing Interface},
	Year = {1999}}

@book{MPI2,
	Address = {Cambridge, Massachusetts},
	Author = {William Gropp and Ewing Lusk and Rajeev Thakur},
	Date-Added = {2014-10-03 01:43:26 +0000},
	Date-Modified = {2014-10-03 01:44:03 +0000},
	Publisher = {MIT Press},
	Title = {Using {MPI}-2: Advanced Features of the Message-Passing Interface},
	Year = {1999}}

@book{Iverson1962,
	Address = {New York, NY, USA},
	Author = {Kenneth E Iverson},
	Date-Added = {2014-10-03 01:29:23 +0000},
	Date-Modified = {2014-10-03 01:39:06 +0000},
	Publisher = {John Wiley \& Sons},
	Title = {A programming language},
	Year = {1962}}

@article{Ladner1980,
	Author = {Ladner, Richard E and Fischer, Michael J},
	Date-Added = {2014-10-02 21:25:58 +0000},
	Date-Modified = {2014-10-03 02:07:23 +0000},
	Journal = {Journal of the Association for Computing Machinery},
	Number = {4},
	Pages = {831--838},
	Title = {Parallel Prefix Computation},
	Volume = {27},
	Year = {1980},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/322217.322232}}

@article{Bezanson2012,
	Archiveprefix = {arXiv},
	Author = {Jeff Bezanson and Stefan Karpinski and Viral B. Shah and Alan Edelman},
	Date-Added = {2014-10-02 21:02:08 +0000},
	Date-Modified = {2014-10-03 02:04:44 +0000},
	Eprint = {1209.5145},
	Journal = {arXiv:1209.5145 [cs.PL]},
	Primaryclass = {cs.PL},
	Title = {{J}ulia: A Fast Dynamic Language for Technical Computing},
	Bdsk-Url-1 = {http://arxiv.org/abs/1209.5145}}

@inproceedings{Bezanson2014,
	Acmid = {2627383},
	Address = {New York, NY, USA},
	Articleno = {56},
	Author = {Bezanson, Jeff and Chen, Jiahao and Karpinski, Stefan and Shah, Viral and Edelman, Alan},
	Booktitle = {Proceedings of ACM SIGPLAN International Workshop on Libraries, Languages, and Compilers for Array Programming},
	Date-Added = {2014-10-02 20:59:56 +0000},
	Date-Modified = {2014-10-02 21:09:24 +0000},
	Doi = {10.1145/2627373.2627383},
	Isbn = {978-1-4503-2937-8},
	Keywords = {Julia, array indexing, dynamic dispatch, multiple dispatch, static analysis, type inference},
	Location = {Edinburgh, United Kingdom},
	Numpages = {6},
	Pages = {56--61},
	Publisher = {ACM},
	Series = {ARRAY'14},
	Title = {Array Operators Using Multiple Dispatch: A Design Methodology for Array Implementations in Dynamic Languages},
	Year = {2014},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2627373.2627383},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2627373.2627383}}

@url{Compose.jl,
	Author = {Daniel C Jones and Darwin Darakananda and Keno Fischer and others},
	Date-Added = {2014-10-02 20:56:32 +0000},
	Date-Modified = {2014-10-03 16:56:42 +0000},
	Title = {Compose.jl v0.3.9 (composejl.org) - Declarative vector graphics for {J}ulia},
	Url = {http://composejl.org},
	Urldate = {2014-09-26},
	Bdsk-Url-1 = {composejl.org}}

@incollection{Blelloch1993,
	Address = {San Mateo, California},
	Author = {Blelloch, Guy E},
	Booktitle = {Synthesis of Parallel Algorithms},
	Chapter = {1},
	Editor = {Reif, John H},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Blelloch/Synthesis of Parallel Algorithms/Blelloch - 1993 - Prefix sums and their applications.pdf:pdf},
	Isbn = {155860135X},
	Pages = {35--60},
	Publisher = {Morgan Kaufmann},
	Title = {{Prefix sums and their applications}},
	Year = {1993}}

@article{Brent1982,
	Author = {Brent, Richard P},
	Date-Modified = {2014-10-03 01:28:28 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Brent/IEEE Transactions on Computers/Brent - 1982 - A Regular Layout for Parallel Adders.pdf:pdf},
	Issn = {0018-9340},
	Journal = {IEEE Transactions on Computers},
	Month = mar,
	Number = {3},
	Pages = {260--264},
	Title = {{A Regular Layout for Parallel Adders}},
	Volume = {C-31},
	Year = {1982},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1675982},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TC.1982.1675982}}

@incollection{Bell2012,
	Address = {Waltham, MA},
	Author = {Bell, Nathan and Hoberock, Jared},
	Booktitle = {GPU Computing Gems Jade Edition},
	Chapter = {26},
	Date-Modified = {2014-10-03 02:04:37 +0000},
	Editor = {Hwu, Wen-Mei W. and Schuh, Andrew and Mohammad, Nadeem and Bradley, Thomas and Jargstorff, Frank and Micikevicius, Paulius and Tonge, Richard and Wang, Peng and Wooley, Cliff},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Bell, Hoberock/GPU Computing Gems Jade Edition/Bell, Hoberock - 2012 - Thrust A Productivity-Oriented Library for CUDA.pdf:pdf},
	Isbn = {9780123859631},
	Pages = {359--371},
	Publisher = {Morgan-Kaufmann},
	Series = {Applications of GPU Computing},
	Title = {{T}hrust: A Productivity-Oriented Library for {CUDA}},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/B978-0-12-385963-1.00026-5}}

@incollection{Harris2007,
	Abstract = {Parallel prefix sum, also known as parallel Scan, is a useful building block for many parallel algorithms including sorting and building data structures. In this document we introduce Scan and describe step-by-step how it can be implemented efficiently in NVIDIA CUDA. We start with a basic na\"{\i}ve algorithm and proceed through more advanced techniques to obtain best performance. We then explain how to scan arrays of arbitrary size that cannot be processed with a single block of threads. Month},
	Address = {Upper Saddle River, NJ},
	Author = {Harris, Mark and Sengupta, S and Owens, JD},
	Booktitle = {GPU Gems 3},
	Chapter = {39},
	Date-Modified = {2014-10-03 02:06:25 +0000},
	Editor = {Nguyen, Hubert},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Harris, Sengupta, Owens/GPU Gems 3/Harris, Sengupta, Owens - 2007 - Parallel prefix sum (scan) with CUDA.pdf:pdf},
	Keywords = {parallel prefix sum},
	Number = {April 2007},
	Pages = {851--876},
	Publisher = {Addison-Wesley},
	Title = {Parallel prefix sum (scan) with {CUDA}},
	Year = {2007}}

@book{Blelloch1990,
	Address = {Cambridge, Massachusetts},
	Author = {Blelloch, Guy E},
	Date-Modified = {2014-10-03 01:28:28 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Blelloch/Unknown/Blelloch - 1990 - Vector models for data-parallel computing.pdf:pdf},
	Isbn = {026202313X},
	Keywords = {computing,tor models for data-parallel},
	Publisher = {MIT Press},
	Series = {Artificial Intelligence},
	Title = {{Vector models for data-parallel computing}},
	Year = {1990},
	Bdsk-Url-1 = {https://www.cs.cmu.edu/afs/cs.cmu.edu/Web/People/blelloch/papers/Ble90.pdf}}

@inproceedings{Chakravarty2011,
	Address = {New York, New York, USA},
	Author = {Chakravarty, Manuel M T and Keller, Gabriele and Lee, Sean and McDonell, Trevor L and Grover, Vinod},
	Booktitle = {Proceedings of the Sixth Workshop on Declarative Aspects of Multicore Programming - DAMP '11},
	Date-Modified = {2014-10-10 23:23:23 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Chakravarty et al/Proceedings of the sixth workshop on Declarative aspects of multicore programming - DAMP '11/Chakravarty et al. - 2011 - Accelerating Haskell array codes with multicore GPUs.pdf:pdf},
	Isbn = {9781450304863},
	Keywords = {chakravarty,elerating haskell array codes,manuel m,t,with multicore gpus},
	Pages = {3--14},
	Publisher = {ACM Press},
	Title = {Accelerating {H}askell array codes with multicore {GPU}s},
	Year = {2011},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=1926354.1926358},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1926354.1926358}}

@article{Chamberlain2000,
	Author = {Chamberlain, Bradford L and Choi, Sung-Eun and Lewis, E Christopher and Lin, Calvin and Snyder, Lawrence and Weathersby, W Derrick},
	Date-Modified = {2014-10-03 02:04:28 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Chamberlain et al/IEEE Transactions on Software Engineering/Chamberlain et al. - 2000 - ZPL a machine independent programming language for parallel computers.pdf:pdf},
	Issn = {00985589},
	Journal = {IEEE Transactions on Software Engineering},
	Month = mar,
	Number = {3},
	Pages = {197--211},
	Title = {{ZPL}: a machine independent programming language for parallel computers},
	Volume = {26},
	Year = {2000},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=842947},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/32.842947}}

@article{Blelloch1989,
	Author = {Blelloch, Guy E},
	Date-Modified = {2014-10-03 01:28:28 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Blelloch/IEEE Transactions on Computers/Blelloch - 1989 - Scans as primitive parallel operations.pdf:pdf},
	Issn = {00189340},
	Journal = {IEEE Transactions on Computers},
	Number = {11},
	Pages = {1526--1538},
	Title = {{Scans as primitive parallel operations}},
	Volume = {38},
	Year = {1989},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=42122},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/12.42122}}

@inproceedings{Chong2014,
	Address = {New York, New York, USA},
	Author = {Chong, Nathan and Donaldson, Alastair F. and Ketema, Jeroen},
	Booktitle = {Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages - POPL '14},
	Date-Modified = {2014-10-03 02:05:50 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Chong, Donaldson, Ketema/Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages - POPL '14/Chong, Donaldson, Ketema - 2014 - A sound and complete abstraction for reasoning about parallel prefix sums.pdf:pdf},
	Isbn = {9781450325448},
	Keywords = {for,ound and complete abstraction,reasoning about parallel prefix,sums},
	Pages = {397--409},
	Publisher = {ACM Press},
	Title = {A sound and complete abstraction for reasoning about parallel prefix sums},
	Year = {2014},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?doid=2535838.2535882},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2535838.2535882}}

@article{Wang1996,
	Author = {Wang, Haigeng and Nicolau, Alexandru and Siu, Kai-Yeng S},
	Date-Modified = {2014-10-03 02:08:56 +0000},
	Issn = {00189340},
	Journal = {IEEE Transactions on Computers},
	Number = {11},
	Pages = {1257--1271},
	Title = {The strict time lower bound and optimal schedules for parallel prefix with resource constraints},
	Volume = {45},
	Year = {1996},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%5C_all.jsp?arnumber=544482%20http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=544482},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/12.544482}}

@article{Gorlatch1999,
	Abstract = {Homomorphisms are functions that match the divide-and-conquer pattern and are widely used in parallel programming. Two problems are studied for homomorphisms on lists: 1. (1) parallelism extraction: finding a homomorphic representation of a given function; 2. (2) parallelism implementation: deriving an efficient parallel program that computes the function. The proposed approach to parallelism extraction starts by writing two sequential programs for the function, on traditional cons lists and on dual snoc lists; the parallel program is obtained by generalizing sequential programs as terms. For almost-homomorphic functions, e.g., the maximum segment sum problem, our method provides a systematic embedding into a homomorphism. The implementation problem is addressed by introducing the class of distributable homomorphisms and deriving for them a common parallel program schema. The derivation is based on equational reasoning in the Bird-Meertens formalism, which guarantees the correctness of the parallel target program. The approach is illustrated with the function scan (parallel prefix), for which the combination of our two systematic methods yields the optimal hypercube algorithm, usually presented ad hoc in the literature.},
	Author = {Gorlatch, Sergei},
	Date-Modified = {2014-10-03 02:06:14 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Gorlatch/Science of Computer Programming/Gorlatch - 1999 - Extracting and implementing list homomorphisms in parallel program development.pdf:pdf},
	Issn = {01676423},
	Journal = {Science of Computer Programming},
	Keywords = {ence of},
	Month = jan,
	Number = {1},
	Pages = {1--27},
	Title = {Extracting and implementing list homomorphisms in parallel program development},
	Volume = {33},
	Year = {1999},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0167642397000142%20http://linkinghub.elsevier.com/retrieve/pii/S0167642397000142},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/S0167-6423(97)00014-2}}

@incollection{Hinze2004,
	Address = {Berlin, Heidelberg},
	Author = {Hinze, Ralf},
	Booktitle = {Mathematics of Program Construction},
	Chapter = {11},
	Date-Modified = {2014-10-07 05:58:57 +0000},
	Editor = {Kozen, Dexter},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Hinze/Mathematics of Program Construction/Hinze - 2004 - An Algebra of Scans.pdf:pdf},
	Isbn = {978-3-540-22380-1},
	Pages = {186--210},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Title = {An Algebra of Scans},
	Year = {2004},
	Bdsk-Url-1 = {http://link.springer.com/chapter/10.1007/978-3-540-27764-4%5C_11},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/978-3-540-27764-4%5C_11}}

@incollection{Sanders2006,
	Address = {Berlin, Heidelberg},
	Author = {Sanders, Peter and Tr\"{a}ff, Jesper Larsson},
	Booktitle = {Recent Advances in Parallel Virtual Machine and Message Passing Interface},
	Chapter = {15},
	Date-Modified = {2014-10-07 05:59:01 +0000},
	Editor = {Mohr, Bernd and Tr\"{a}ff, Jesper Larsson and Worringen, Joachim and Dongarra, Jack},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Sanders, Tr\"{a}ff/Recent Advances in Parallel Virtual Machine and Message Passing Interface/Sanders, Tr\"{a}ff - 2006 - Parallel Prefix (Scan) Algorithms for MPI.pdf:pdf},
	Isbn = {978-3-540-39110-4},
	Keywords = {algorithms for mpi,allel prefix,jesper larsson tr,peter sanders 1 and,scan},
	Pages = {49--57},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Title = {Parallel Prefix (Scan) Algorithms for {MPI}},
	Year = {2006},
	Bdsk-Url-1 = {http://link.springer.com/chapter/10.1007/11846802%5C_15%20http://www.springerlink.com/index/10.1007/11846802},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/11846802}}

@article{Mathias1995,
	Author = {Mathias, Roy},
	Date-Modified = {2014-10-03 02:07:51 +0000},
	Journal = {SIAM Journal on Scientific Computing},
	Month = jul,
	Number = {4},
	Pages = {956--973},
	Title = {The Instability of Parallel Prefix Matrix Multiplication},
	Volume = {16},
	Year = {1995},
	Bdsk-Url-1 = {http://dx.doi.org/10.1137/0916056}}

@article{Seal2013,
	Author = {Seal, Sudip K. and Perumalla, Kalyan S. and Hirshman, Steven P.},
	Date-Modified = {2014-10-03 02:08:24 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Comput et al/J. Parallel Distrib. Comput/Comput et al. - 2012 - Revisiting parallel cyclic reduction and parallel prefix-based algorithms for block tridiagonal systems of equati.pdf:pdf},
	Issn = {07437315},
	Journal = {Journal of Parallel and Distributed Computing},
	Keywords = {2013,273,280,73,com,comput,contents lists available at,elsevier,j,journal homepage,jpdc,locate,parallel distrib,sciverse sciencedirect,www},
	Month = feb,
	Number = {2},
	Pages = {273--280},
	Publisher = {Elsevier Inc.},
	Title = {Revisiting parallel cyclic reduction and parallel prefix-based algorithms for block tridiagonal systems of equations},
	Volume = {73},
	Year = {2013},
	Bdsk-Url-1 = {http://linkinghub.elsevier.com/retrieve/pii/S0743731512002535},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/j.jpdc.2012.10.003}}

@article{Lu1996,
	Author = {Lu, Tan-Chun and Hou, Yu-Song and Chen, Rong-Jaye},
	Date-Modified = {2014-10-10 23:23:51 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Lu, Hou, Chen/Computers \& Mathematics with Applications/Lu, Hou, Chen - 1996 - A parallel Poisson generator using parallel prefix.pdf:pdf},
	Issn = {08981221},
	Journal = {Computers \& Mathematics with Applications},
	Keywords = {1996,3,31,33-42,applic,no,pp,puters math,vol},
	Month = feb,
	Number = {3},
	Pages = {33--42},
	Title = {A parallel {P}oisson generator using parallel prefix},
	Volume = {31},
	Year = {1996},
	Bdsk-Url-1 = {http://linkinghub.elsevier.com/retrieve/pii/0898122195002049},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/0898-1221(95)00204-9}}

@article{Chen1992,
	Abstract = {Associativity of a binary operation allows many applications that are not possible with a non-associative binary operation. We propose a method to transform a binary expression into an associative one and present two related applications.},
	Author = {Chen, Rong-Jaye and Hou, Yu-Song},
	Date-Modified = {2014-10-03 02:05:19 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Chen, Hou/Information Processing Letters/Chen, Hou - 1992 - Non-associative parallel prefix computation.pdf:pdf},
	Issn = {00200190},
	Journal = {Information Processing Letters},
	Keywords = {ormation},
	Month = nov,
	Number = {2},
	Pages = {91--94},
	Title = {Non-associative parallel prefix computation},
	Volume = {44},
	Year = {1992},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/002001909290191W%20http://linkinghub.elsevier.com/retrieve/pii/002001909290191W},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/0020-0190(92)90191-W}}

@article{Egecioglu1992,
	Author = {E{\u g}ecio{\u g}lu, {\"O}mer and Ko{\c c}, {\c C}etin Kaya},
	Date-Modified = {2014-10-03 02:06:05 +0000},
	Journal = {Computers \& Mathematics with Applications},
	Number = {4},
	Pages = {77--84},
	Title = {Parallel Prefix Computation with Few Processors},
	Volume = {24},
	Year = {1992},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/0898-1221(92)90009-7}}

@incollection{Chi1992,
	Address = {Berlin, Heidelberg},
	Author = {Chi, Lucas and Hui, Kwong},
	Booktitle = {Combinatorial Pattern Matching},
	Chapter = {19},
	Date-Modified = {2014-10-07 05:58:50 +0000},
	Editor = {Apostolico, Alberto and Crochemore, Maxime and Galil, Zvi and Manber, Udi},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Chi, Hui/Combinatorial Pattern Matching/Chi, Hui - 1992 - Color Set Size problem with applications to string matching.pdf:pdf},
	Isbn = {978-3-540-56024-1},
	Pages = {230--243},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Title = {Color Set Size problem with applications to string matching},
	Year = {1992},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/3-540-56024-6%5C_19}}

@article{Kruskal1985,
	Author = {Kruskal, Clyde P. and Rudolph, Larry and Snir, Marc},
	Date-Modified = {2014-10-03 02:07:09 +0000},
	Journal = {IEEE Transactions on Computers},
	Number = {10},
	Pages = {965--968},
	Title = {The power of parallel prefix},
	Volume = {C-34},
	Year = {1985},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%5C_all.jsp?arnumber=6312202%20http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6312202},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TC.1985.6312202}}

@article{Moitra1991,
	Author = {Moitra, Dipen},
	Date-Modified = {2014-10-03 02:07:58 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Moitra/Algorithmica/Moitra - 1991 - Finding a minimal cover for binary images An optimal parallel algorithm.pdf:pdf},
	Issn = {0178-4617},
	Journal = {Algorithmica},
	Month = jun,
	Number = {1-6},
	Pages = {624--657},
	Title = {Finding a minimal cover for binary images: An optimal parallel algorithm},
	Volume = {6},
	Year = {1991},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/BF01759065},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/BF01759065}}

@book{Snir1995,
	Address = {Cambridge, MA},
	Author = {Snir, Marc and Otto, Steve and Huss-Lederman, Steven and Walker, David and Dongarra, Jack},
	Date-Modified = {2014-10-03 02:08:40 +0000},
	Publisher = {MIT Press},
	Title = {{MPI}: The Complete Reference},
	Year = {1995}}

@article{Hillis1986,
	Abstract = {Parallel computers with tens of thousands of processors are typically programmed in a data parallel style, as opposed to the control parallel style used in multiprocessing. The success of data parallel algorithms---even on problems that at first glance seem inherently serial---suggests that this style of programming has much wider applicability than was previously thought.},
	Address = {New York, NY, USA},
	Author = {Hillis, W Daniel and {Steele, Jr.}, Guy L},
	Date-Modified = {2014-10-03 02:06:47 +0000},
	Issn = {0001-0782},
	Journal = {Communications of the ACM},
	Month = dec,
	Number = {12},
	Pages = {1170--1183},
	Publisher = {ACM},
	Title = {Data Parallel Algorithms},
	Volume = {29},
	Year = {1986},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/7902.7903},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/7902.7903}}

@inproceedings{Sengupta2007,
	Abstract = {The scan primitives are powerful, general-purpose data-parallel primitives that are building blocks for a broad range of applications. We describe GPU implementations of these primitives, specifically an efficient formulation and implementation of segmented scan, on NVIDIA GPUs using the CUDA API. Using the scan primitives, we show novel GPU implementations of quicksort and sparse matrix-vector multiply, and analyze the performance of the scan primitives, several sort algorithms that use the scan primitives, and a graphical shallow-water fluid simulation using the scan framework for a tridiagonal matrix solver.},
	Address = {Aire-la-Ville, Switzerland},
	Author = {Sengupta, Shubhabrata and Harris, Mark and Zhang, Yao and Owens, John D},
	Booktitle = {GH '07 Proceedings of the 22nd ACM SIGGRAPH / EUROGRAPHICS symposium on Graphics hardware},
	Date-Modified = {2014-10-06 00:52:34 +0000},
	Isbn = {9781595936257},
	Pages = {97--106},
	Publisher = {Eurographics Association},
	Title = {Scan primitives for {GPU} computing},
	Year = {2007}}

@article{Egecioglu1990,
	Author = {E{\u g}ecio{\u g}lu, {\"O}. and Gallopoulos, E. and Ko{\c c}, {\c C}. K.},
	Date-Modified = {2014-10-03 02:12:28 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/E{\u g}ecio{\u g}lu, Gallopoulos, Ko\c{c}/BIT Numerical Mathematics/E{\u g}ecio{\u g}lu, Gallopoulos, Ko\c{c} - 1990 - A parallel method for fast and practical high-order newton interpolation.pdf:pdf},
	Issn = {0006-3835},
	Journal = {BIT Numerical Mathematics},
	Keywords = {1990,268 288,30},
	Month = jun,
	Number = {2},
	Pages = {268--288},
	Title = {A parallel method for fast and practical high-order {N}ewton interpolation},
	Volume = {30},
	Year = {1990},
	Bdsk-Url-1 = {http://link.springer.com/10.1007/BF02017348},
	Bdsk-Url-2 = {http://dx.doi.org/10.1007/BF02017348}}

@article{Ofman1963,
	Author = {Ofman, Yu},
	Date-Modified = {2014-10-07 23:59:20 +0000},
	Journal = {Soviet Physics Doklady},
	Number = {7},
	Pages = {589--591},
	Title = {On the algorithmic complexity of discrete functions},
	Volume = {7},
	Year = {1963}}

@article{Iverson1979,
	Author = {Iverson, Kenneth E},
	Date-Modified = {2014-10-08 00:31:01 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Iverson/ACM Transactions on Programming Languages and Systems/Iverson - 1979 - Operators.pdf:pdf},
	Issn = {01640925},
	Journal = {ACM Transactions on Programming Languages and Systems},
	Month = oct,
	Number = {2},
	Pages = {161--176},
	Title = {{Operators}},
	Volume = {1},
	Year = {1979},
	Bdsk-Url-1 = {http://portal.acm.org/citation.cfm?doid=357073.357074},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/357073.357074}}

@article{Mitchell1988,
	Abstract = {Abstract data type declarations appear in typed programming languages like Ada, Alphard, CLU and ML. This form of declaration binds a list of identifiers to a type with associated operations, a composite ``value'' we call a data algebra. We use a second-order typed lambda calculus SOL to show how data algebras may be given types, passed as parameters, and returned as results of function calls. In the process, we discuss the semantics of abstract data type declarations and review a connection between typed programming languages and constructive logic.},
	Author = {Mitchell, John C and Plotkin, Gordon D},
	Date-Modified = {2014-10-09 22:27:18 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Mitchell, Plotkin/ACM Transactions on Programming Languages and Systems/Mitchell, Plotkin - 1988 - Abstract types have existential type.pdf:pdf},
	Issn = {01640925},
	Journal = {ACM Transactions on Programming Languages and Systems},
	Month = jul,
	Number = {3},
	Pages = {470--502},
	Title = {{Abstract types have existential type}},
	Volume = {10},
	Year = {1988},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=45065%20http://portal.acm.org/citation.cfm?doid=44501.45065},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/44501.45065}}

@article{Cardelli1985,
	Abstract = {Our objective is to understand the notion of type in programming languages, present a model of typed, polymorphic programming languages that reflects recent research in type theory, and examine the relevance of recent research to the design of practical programming languages. Object-oriented languages provide both a framework and a motivation for exploring the interaction among the concepts of type, data abstraction, and polymorphism, since they extend the notion of type to data abstraction and since type inheritance is an important form of polymorphism. We develop a \&lgr;-calculus-based model for type systems that allows us to explore these interactions in a simple setting, unencumbered by complexities of production programming languages. The evolution of languages from untyped universes to monomorphic and then polymorphic type systems is reviewed. Mechanisms for polymorphism such as overloading, coercion, subtyping, and parameterization are examined. A unifying framework for polymorphic type systems is developed in terms of the typed \&lgr;-calculus augmented to include binding of types by quantification as well as binding of values by abstraction. The typed \&lgr;-calculus is augmented by universal quantification to model generic functions with type parameters, existential quantification and packaging (information hiding) to model abstract data types, and bounded quantification to model subtypes and type inheritance. In this way we obtain a simple and precise characterization of a powerful type system that includes abstract data types, parametric polymorphism, and multiple inheritance in a single consistent framework. The mechanisms for type checking for the augmented \&lgr;-calculus are discussed. The augmented typed \&lgr;-calculus is used as a programming language for a variety of illustrative examples. We christen this language Fun because fun instead of \&lgr; is the functional abstraction keyword and because it is pleasant to deal with. Fun is mathematically simple and can serve as a basis for the design and implementation of real programming languages with type facilities that are more powerful and expressive than those of existing programming languages. In particular, it provides a basis for the design of strongly typed object-oriented languages.},
	Author = {Cardelli, Luca and Wegner, Peter},
	Date-Modified = {2014-10-09 22:27:18 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Cardelli, Wegner/ACM Computing Surveys/Cardelli, Wegner - 1985 - On understanding types, data abstraction, and polymorphism.pdf:pdf},
	Issn = {03600300},
	Journal = {ACM Computing Surveys},
	Month = dec,
	Number = {4},
	Pages = {471--523},
	Title = {{On understanding types, data abstraction, and polymorphism}},
	Volume = {17},
	Year = {1985},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/6041.6042}}

@book{Castagna1997,
	Address = {Boston},
	Author = {Castagna, Giuseppe},
	Date-Modified = {2014-10-09 22:27:18 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Castagna/Unknown/Castagna - 1997 - Object-oriented programming a unified foundation.pdf:pdf},
	Isbn = {9781461286707},
	Publisher = {Birkh{\"a}user},
	Series = {Progress in Theoretical Computer Science},
	Title = {{Object-oriented programming: a unified foundation}},
	Year = {1997},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=249197}}

@article{Scott1976,
	Author = {Scott, Dana},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Scott/SIAM Journal on Computing/Scott - 1976 - Data types as lattices.pdf:pdf},
	Journal = {SIAM Journal on Computing},
	Keywords = {a types},
	Number = {3},
	Pages = {522--87},
	Title = {{Data types as lattices}},
	Volume = {5},
	Year = {1976}}

@article{Strachey2000,
	Abstract = {This paper forms the substance of a course of lectures given at the International Summer School in Computer Programming at Copenhagen in August, 1967. The lectures were originally given from notes and the paper was written after the course was finished. In spite of this, and only partly because of the shortage of time, the paper still retains many of the shortcomings of a lecture course. The chief of these are an uncertainty of aim---it is never quite clear what sort of audience there will be for such lectures---and an associated switching from formal to informal modes of presentation which may well be less acceptable in print than it is natural in the lecture room. For these (and other) faults, I apologise to the reader. There are numerous references throughout the course to CPL [1--3]. This is a programming language which has been under development since 1962 at Cambridge and London and Oxford. It has served as a vehicle for research into both programming languages and the design of compilers. Partial implementations exist at Cambridge and London. The language is still evolving so that there is no definitive manual available yet. We hope to reach another resting point in its evolution quite soon and to produce a compiler and reference manuals for this version. The compiler will probably be written in such a way that it is relatively easyto transfer it to another machine, and in the first instance we hope to establish it on three or four machines more or less at the same time. The lack of a precise formulation for CPL should not cause much difficulty in this course, as we are primarily concerned with the ideas and concepts involved rather than with their precise representation in a programming language.},
	Author = {Strachey, Christopher},
	Date-Modified = {2014-10-10 19:45:57 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Strachey/Higher-Order and Symbolic Computation/Strachey - 2000 - Fundamental Concepts in Programming Languages.pdf:pdf},
	Journal = {Higher-Order and Symbolic Computation},
	Keywords = {CPL,L-values,R-values,ad hoc polymorphism,binding mechanisms,foundations of computing,functions as data,parameter passing,parametric polymorphism,programming languages,semantics,type completeness,variable binding},
	Number = {1-2},
	Pages = {11--49},
	Title = {{Fundamental Concepts in Programming Languages}},
	Volume = {13},
	Year = {2000},
	Bdsk-Url-1 = {http://dx.doi.org/10.1023/A:1010000313106}}

@article{Kogge1973,
	Author = {Kogge, Peter M. and Stone, Harold S.},
	Date-Modified = {2014-10-10 19:45:57 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Kogge, Stone/IEEE Transactions on Computers/Kogge, Stone - 1973 - A Parallel Algorithm for the Efficient Solution of a General Class of Recurrence Equations.pdf:pdf},
	Issn = {0018-9340},
	Journal = {IEEE Transactions on Computers},
	Keywords = {1969 by eta kappa,8,august 1973,c-22,can automatic control council,he has served,he was also named,ieee transactions on computers,no,nu,the outstanding,vol,young electrical engineer for},
	Month = aug,
	Number = {8},
	Pages = {786--793},
	Title = {{A Parallel Algorithm for the Efficient Solution of a General Class of Recurrence Equations}},
	Volume = {C-22},
	Year = {1973},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5009159},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TC.1973.5009159}}

@article{Sklansky1960,
	Abstract = {Conditional-sum addition is a new mechanism for parallel, high-speed addition of digitally-represented numbers. Its design is based on the computation of ``conditional'' sums and carries that result from the assumption of all the possible distributions of carries for various groups of columns. A rapid-sequence mode of operation provides an addition rate that is invariant with the lengths of the summands. Another advantage is the possibility of realizing the adder with ``integrated devices'' or ``modules.'' The logic of conditional-sum addition is applicable to all positive radices, as well as to multisummand operation. In a companion paper, a comparison of several adders shows that, within a set of stated assumptions, conditional-sum addition is superior in certain respects, including processing speed.},
	Author = {Sklansky, J},
	Date-Modified = {2014-10-10 19:45:57 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Sklansky/IEEE Transactions on Electronic Computers/Sklansky - 1960 - Conditional-Sum Addition Logic.pdf:pdf},
	Issn = {0367-7508},
	Journal = {IEEE Transactions on Electronic Computers},
	Month = jun,
	Number = {2},
	Pages = {226--231},
	Title = {{Conditional-Sum Addition Logic}},
	Volume = {EC-9},
	Year = {1960},
	Bdsk-Url-1 = {http://ieeexplore.ieee.org/xpls/abs%5C_all.jsp?arnumber=5219822},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/TEC.1960.5219822}}

@article{Smith1987,
	Abstract = {A strategy for designing divide-and-conquer algorithms that was originally presented in a previous article is extended and applied to several new problems. The extension involves techniques for modifying the original specification based on specific kinds of failures that can occur during the design process. We derive several divide-and-conquer algorithms that are substantially more efficient than previously known algorithms. This paper also emphasizes the naturalness with which divide-and-conquer algorithms can be transformed into a parallel format. One problem explored is to find the maximum sum over all rectangular subregions of a given matrix of integers. For an n × n matrix there is a straightforward O(n6) enumeration algorithm. We derive a O(n3) divide-and-conquer algorithm, then show that it can be executed in O(log2n) time in parallel and, furthermore, with pipelining of inputs it can be executed with O(1) time between successive outputs.},
	Author = {Smith, Douglas R},
	Date-Modified = {2014-10-10 23:23:04 +0000},
	File = {:Users/jiahao/Documents/Mendeley Desktop/Smith/Science of Computer Programming/Smith - 1987 - Applications of a strategy for designing divide-and-conquer algorithms.pdf:pdf},
	Issn = {01676423},
	Journal = {Science of Computer Programming},
	Month = jun,
	Number = {3},
	Pages = {213--229},
	Title = {{Applications of a strategy for designing divide-and-conquer algorithms}},
	Volume = {8},
	Year = {1987},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/0167642387900347},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/0167-6423(87)90034-7}}
